---
to: src/routes/<%- h.changeCase.param(h.inflection.singularize(name)) %>.spec.ts
---
/**
 * @fileoverview <%- h.changeCase.sentence(h.inflection.singularize(name)) %> route integration tests
 */

//Imports
import app from  '@/routes/index';
import request from 'supertest';
import test from 'ava';
import {<%- h.changeCase.camel(h.inflection.singularize(name)) %>A, <%- h.changeCase.camel(h.inflection.singularize(name)) %>B} from '!/fixtures/<%- h.changeCase.param(h.inflection.singularize(name)) %>';
import {<%- h.changeCase.pascal(h.inflection.singularize(name)) %>} from '@/models/<%- h.changeCase.param(h.inflection.singularize(name)) %>';
import {start, stop, reset} from '!/lib/mongo';

//Ephemeral MongoDB
test.before('Start MongoDB', start);
test.afterEach.always('Reset MongoDB', reset);
test.after('Stop MongoDB', stop);

//Tests
<% for (const [operation, separator] of h.list(entity.operations, '\n\n')) { -%>
test.serial('<%- operation.description %>', async ctx =>
{
<% switch (operation.type) { case 'all': -%>
  //Create the <%- h.changeCase.no(h.inflection.pluralize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentA = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.create(<%- h.changeCase.camel(h.inflection.singularize(name)) %>A);
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentB = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.create(<%- h.changeCase.camel(h.inflection.singularize(name)) %>B);

  //Save the <%- h.changeCase.no(h.inflection.pluralize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentA.save();
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentB.save();

<% break; case 'create': -%>
<% break; case 'get': case 'update': case 'delete': -%>
  //Create the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>Document = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.create(<%- h.changeCase.camel(h.inflection.singularize(name)) %>A);

  //Save the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.save();

<% break; default: -%>
  //TODO: setup the database

<% break; } -%>
  //Make the request
  const res = await request(app.callback())<% switch (operation.type) { case 'all': case 'create': -%>

    .<%- operation.method %>('<%- operation.path %>')<% break; case 'get': case 'update': case 'delete': -%>

    .<%- operation.method %>(`<%- operation.path.replace(':id', `\${${h.changeCase.camel(h.inflection.singularize(name))}Document.id}`) %>`)<% break; default: -%>

    //TODO: add path parameters
    .<%- operation.method %>('<%- operation.path %>')<% break; } if (operation.requestMime != null) { %>
    .set('content-type', '<%- operation.requestMime %>')<% } if (operation.requestFields.length > 0) { %>
    .send({
<% switch (operation.type) { case 'create': -%>
<% for (const [field, separator] of h.list(operation.requestFields, ',')) { -%>
      <%- field.name %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- field.name %><%- separator %>
<% } -%>
<% break; case 'update': -%>
<% for (const [field, separator] of h.list(operation.requestFields, ',')) { -%>
      <%- field.name %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- field.name %><%- separator %>
<% } -%>
<% break; default: -%>
      //TODO: add request body
<% break; } -%>
    })<% } %>;

  //Ensure the response is expected
<% if (operation.responseMime != null) { -%>
  ctx.assert(res.headers['content-type'].includes('<%- operation.responseMime %>'));
<% } if (operation.responseFields.length > 0) { -%>
<% switch (operation.type) { case 'all': -%>
  ctx.deepEqual(res.body, [
    {
      id: <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentA.id,
<% for (const [field, separator] of h.list(operation.responseFields.filter(field => field.name != 'id'), ',')) { -%>
      <%- field.name %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- field.name %><%- separator %>
<% } -%>
    },
    {
      id: <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentB.id,
<% for (const [field, separator] of h.list(operation.responseFields.filter(field => field.name != 'id'), ',')) { -%>
      <%- field.name %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- field.name %><%- separator %>
<% } -%>
    }
  ]);
<% break; case 'create': -%>
  ctx.assert(res.body.id.length > 0);
<% for (const field of operation.responseFields.filter(field => field.name != 'id')) { -%>
  ctx.is(res.body.<%- field.name %>, <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- field.name %>);
<% } break; case 'get': case 'delete': -%>
  ctx.deepEqual(res.body, {
<% for (const [field, separator] of h.list(operation.responseFields.filter(field => field.name != 'id'), ',')) { -%>
    <%- field.name %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- field.name %><%- separator %>
<% } -%>
  });
<% break; case 'update': -%>
  ctx.deepEqual(res.body, {
<% for (const [field, separator] of h.list(operation.responseFields.filter(field => field.name != 'id'), ',')) { -%>
    <%- field.name %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- field.name %><%- separator %>
<% } -%>
  });
<% break; default: -%>
  //TODO: add response body assertion
  ctx.deepEqual(res.body, null);
<% break; } -%>
<% } -%>
  ctx.is(res.status, <%- operation.responseStatus %>);
<% switch (operation.type) { case 'all': case 'get': -%>
<% break; case 'create': -%>

  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>Document = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.findById(res.body.id, {
<% for (const [field, separator] of h.list(uniqueFields.filter(field => field.name != 'id'), ',')) { -%>
    <%- field.name %>: 1<%- separator %>
<% } -%>
  }) as Record<string, any>;

  //Ensure the document exists
  ctx.assert(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document != null);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> was created correctly
<% for (const field of uniqueFields.filter(field => field.name != 'id')) { -%>
  ctx.deepEqual(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.<%- field.name %>, <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- field.name %>);
<% } break; case 'update': -%>

  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const updated<%- h.changeCase.pascal(h.inflection.singularize(name)) %>Document = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.findById(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.id, {
<% for (const [field, separator] of h.list(uniqueFields.filter(field => field.name != 'id'), ',')) { -%>
    <%- field.name %>: 1<%- separator %>
<% } -%>
  }) as Record<string, any>;

  //Ensure the document exists
  ctx.assert(updated<%- h.changeCase.pascal(h.inflection.singularize(name)) %>Document != null);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> was created correctly
<% for (const field of uniqueFields.filter(field => field.name != 'id')) { -%>
  ctx.deepEqual(updated<%- h.changeCase.pascal(h.inflection.singularize(name)) %>Document.<%- field.name %>, <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- field.name %>);
<% } break; case 'delete': -%>

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> was deleted correctly
  ctx.assert(await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.findById(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.id, {}) == null);
<% break; default: -%>
  //TODO: ensure the database was updated correctly
<% break; } -%>
});<%- separator -%>
<% } %>