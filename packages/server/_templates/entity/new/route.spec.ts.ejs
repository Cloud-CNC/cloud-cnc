---
to: src/routes/<%- h.changeCase.param(h.inflection.singularize(name)) %>.spec.ts
---
/**
 * @fileoverview <%- h.changeCase.sentence(h.inflection.singularize(name)) %> route integration tests
 */

//Imports
import app from  '@/routes/index';
import request from 'supertest';
import test from 'ava';
import {<%- h.changeCase.camel(h.inflection.singularize(name)) %>A, <%- h.changeCase.camel(h.inflection.singularize(name)) %>B} from '!/fixtures/<%- h.changeCase.param(h.inflection.singularize(name)) %>';
import {<%- h.changeCase.pascal(h.inflection.singularize(name)) %>} from '@/models/<%- h.changeCase.param(h.inflection.singularize(name)) %>';
import {start, stop, reset} from '!/lib/mongo';

//Ephemeral MongoDB
test.before('Start MongoDB', start);
test.afterEach.always('Reset MongoDB', reset);
test.after('Stop MongoDB', stop);

//Tests
<% for (const [operation, separator] of h.list(entity.operations, '\n\n')) { -%>
<% const requestSchema = (operation.requestSchema != null && operation.requestSchema.type == 'object' && operation.requestSchema.subSchemas.length > 0) ? operation.requestSchema : null; -%>
<% let responseSchema = (operation.responseSchema != null && operation.responseSchema.type == 'object' && operation.responseSchema.subSchemas.length > 0) ? operation.responseSchema : null; -%>
test.serial('<%- operation.description %>', async ctx =>
{
<% switch (operation.type) { case 'all': -%>
  //Create the <%- h.changeCase.no(h.inflection.pluralize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentA = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.create(<%- h.changeCase.camel(h.inflection.singularize(name)) %>A);
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentB = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.create(<%- h.changeCase.camel(h.inflection.singularize(name)) %>B);

  //Save the <%- h.changeCase.no(h.inflection.pluralize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentA.save();
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentB.save();

<% break; case 'create': -%>
<% break; case 'get': case 'update': case 'delete': -%>
  //Create the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>Document = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.create(<%- h.changeCase.camel(h.inflection.singularize(name)) %>A);

  //Save the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.save();

<% break; default: -%>
  //TODO: setup the database

<% break; } -%>
  //Make the request
  const res = await request(app.callback())<% switch (operation.type) { case 'all': case 'create': -%>

    .<%- operation.method %>('<%- operation.path %>')<% break; case 'get': case 'update': case 'delete': -%>

    .<%- operation.method %>(`<%- operation.path.replace(':id', `\${${h.changeCase.camel(h.inflection.singularize(name))}Document.id}`) %>`)<% break; default: -%>

<% if (operation.pathParameters.length > 0) { -%>
    //TODO: add path parameters
<% } -%>
    .<%- operation.method %>('<%- operation.path %>')<% break; } if (operation.requestMime != null) { %>
    .set('content-type', '<%- operation.requestMime %>')<% } switch (operation.type) { case 'all': %>
    .query({
      query: '', //TODO: add query
      page: 1,
      limit: 2
    });
<% break; case 'create': %>
    .send({
<% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ',')) { -%>
      <%- subSchema.key %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- subSchema.key %><%- separator %>
<% } -%>
    });
<% break; case 'get': case 'delete': -%>
;
<% break; case 'update': %>
    .send({
<% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ',')) { -%>
      <%- subSchema.key %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- subSchema.key %><%- separator %>
<% } -%>
    });
<% break; default: -%>
;
<%if (requestSchema != null || operation.queryParameters != null) { -%>
    //TODO: add request body/query parameters
<% } break; } -%>

  //Ensure the response is expected
<% if (operation.responseMime != null) { -%>
  ctx.assert(res.headers['content-type'].includes('<%- operation.responseMime %>'));
<% } if (responseSchema != null) { -%>
<% switch (operation.type) { case 'all': -%>
<% responseSchema = (operation.responseSchema != null && operation.responseSchema.type == 'object' && operation.responseSchema.subSchemas.length > 0) ? operation.responseSchema.subSchemas.find(subSchema => subSchema.key == h.changeCase.lower(h.inflection.pluralize(name))) : null; -%>
  ctx.deepEqual(res.body, {
    page: 1,
    pages: 1,
    <%- h.changeCase.camel(h.inflection.pluralize(name)) %>: [
      {
        id: <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentA.id,
<% for (const [subSchema, separator] of h.list(responseSchema.subSchema.subSchemas.filter(subSchema=> subSchema.key != 'id'), ',')) { -%>
        <%- subSchema.key %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- subSchema.key %><%- separator %>
<% } -%>
      },
      {
        id: <%- h.changeCase.camel(h.inflection.singularize(name)) %>DocumentB.id,
<% for (const [subSchema, separator] of h.list(responseSchema.subSchema.subSchemas.filter(subSchema=> subSchema.key != 'id'), ',')) { -%>
        <%- subSchema.key %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- subSchema.key %><%- separator %>
<% } -%>
      }
    ]
  });
<% break; case 'create': -%>
  ctx.assert(res.body.id.length > 0);
<% for (const subSchema of responseSchema.subSchemas.filter(subSchema=> subSchema.key != 'id')) { -%>
  ctx.is(res.body.<%- subSchema.key %>, <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- subSchema.key %>);
<% } break; case 'get': case 'delete': -%>
  ctx.deepEqual(res.body, {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchemas.filter(subSchema=> subSchema.key != 'id'), ',')) { -%>
    <%- subSchema.key %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- subSchema.key %><%- separator %>
<% } -%>
  });
<% break; case 'update': -%>
  ctx.deepEqual(res.body, {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchemas.filter(subSchema=> subSchema.key != 'id'), ',')) { -%>
    <%- subSchema.key %>: <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- subSchema.key %><%- separator %>
<% } -%>
  });
<% break; default: -%>
  //TODO: add response body assertion
  ctx.deepEqual(res.body, null);
<% break; } -%>
<% } -%>
  ctx.is(res.status, <%- operation.responseStatus %>);
<% switch (operation.type) { case 'all': case 'get': -%>
<% break; case 'create': -%>

  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %>Document = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.findById(res.body.id, {
<% for (const [subSchema, separator] of h.list(schemas.filter(subSchema => subSchema.key != 'id'), ',')) { -%>
    <%- subSchema.key %>: 1<%- separator %>
<% } -%>
  }) as Record<string, any>;

  //Ensure the document exists
  ctx.assert(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document != null);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> was created correctly
<% for (const subSchema of schemas.filter(subSchema => subSchema.key != 'id')) { -%>
  ctx.deepEqual(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.<%- subSchema.key %>, <%- h.changeCase.camel(h.inflection.singularize(name)) %>A.<%- subSchema.key %>);
<% } break; case 'update': -%>

  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const updated<%- h.changeCase.pascal(h.inflection.singularize(name)) %>Document = await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.findById(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.id, {
<% for (const [subSchema, separator] of h.list(schemas.filter(subSchema => subSchema.key != 'id'), ',')) { -%>
    <%- subSchema.key %>: 1<%- separator %>
<% } -%>
  }) as Record<string, any>;

  //Ensure the document exists
  ctx.assert(updated<%- h.changeCase.pascal(h.inflection.singularize(name)) %>Document != null);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> was created correctly
<% for (const subSchema of schemas.filter(subSchema => subSchema.key != 'id')) { -%>
  ctx.deepEqual(updated<%- h.changeCase.pascal(h.inflection.singularize(name)) %>Document.<%- subSchema.key %>, <%- h.changeCase.camel(h.inflection.singularize(name)) %>B.<%- subSchema.key %>);
<% } break; case 'delete': -%>

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> was deleted correctly
  ctx.assert(await <%- h.changeCase.pascal(h.inflection.singularize(name)) %>.findById(<%- h.changeCase.camel(h.inflection.singularize(name)) %>Document.id, {}) == null);
<% break; default: -%>

  //TODO: ensure the database was updated correctly
<% break; } -%>
});<%- separator -%>
<% } %>