---
to: src/models/<%- h.changeCase.param(h.inflection.singularize(name)) %>.ts
---
/**
 * @fileoverview Unified <%- h.changeCase.no(h.inflection.singularize(name)) %> model
 */

//Imports
import Joi from 'joi';
import joigoose from '@/lib/joigoose';
import mongoosePaginate from 'mongoose-paginate-v2';
import mongooseSearch from '@cme-pro/mongoose-search';
import {Document, PaginateModel, Schema, SearchModel, model as createModel} from 'mongoose';

//<%- h.changeCase.sentence(h.inflection.singularize(name)) %> interface
export interface I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>
{<% for (const schema of schemas) { %>
  /**
<% if (schema.description != null) { -%>
<%- h.multiline(schema.description, 3) %>
<% } -%>
   */
  <%- schema.key != null ? schema.key : '//TODO: add key' %><%- !schema.required ? '?' : '' %>: <%- h.typescriptType(schema) %>;
<% } -%>
}

//<%- h.changeCase.sentence(h.inflection.singularize(name)) %> document
export type I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document = Document<unknown, any, I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>>;

//<%- h.changeCase.sentence(h.inflection.singularize(name)) %> Joi schema
export const <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>JoiSchema = Joi.object({
<% for (const [schema, separator] of h.list(schemas, ',')) { -%>
  <%- schema.key != null ? schema.key : '//TODO: add key' %>: <%- h.joiType(schema, true) %><%- schema.required ? '.required()' : '.optional()' %><%- separator %>
<% } -%>
});

//<%- h.changeCase.sentence(h.inflection.singularize(name)) %> Mongoose schema
export const <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>MongooseSchema = new Schema(joigoose.convert(<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>JoiSchema) as any);
<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>MongooseSchema.set('toObject', {
  virtuals: true,
  versionKey: false,
  transform: (document: I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document, value: any) =>
  {
    //Delete the Object ID
    delete value._id;

    //Delete the stringified ID if not specifically selected for
    if (!document.isSelected('id'))
    {
      delete value.id;
    }
  }
});
<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>MongooseSchema.plugin(mongoosePaginate);
<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>MongooseSchema.plugin(mongooseSearch);

//<%- h.changeCase.sentence(h.inflection.singularize(name)) %> model
export const <%- h.changeCase.pascal(h.inflection.singularize(name), false) %> = createModel<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, PaginateModel<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>> & SearchModel<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>>>('<%- h.changeCase.camel(h.inflection.pluralize(name), false) %>', <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>MongooseSchema);