---
to: src/routes/<%- h.changeCase.param(h.inflection.singularize(name)) %>.ts
---
/**
 * @fileoverview <%- h.changeCase.sentence(h.inflection.singularize(name)) %> routes
 */

//Imports
import Router from '@koa/router';
import checkPermission from '@/middleware/permission';
<% if (entity.operations.find(operation => ['create', 'update'].includes(operation.type))) { -%>
import validate from '@/middleware/validate';
<% } -%>
import {
<%_ for (const [operation, separator] of h.list(entity.operations, ',')) { -%>
  <%- operation.name %><%- separator %>
<% } -%>
} from '@/controllers/<%- h.changeCase.param(h.inflection.singularize(name)) %>';
import {<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Schema} from '@/models/<%- h.changeCase.param(h.inflection.singularize(name)) %>';

//Router setup
const router = new Router();

//Register routes
router
<% for (const [operation, operationSeparator] of h.list(entity.operations, '', ';')) { -%>
  /**
<%- h.multiline(operation.description, 3) %>
   */
  .<%- operation.method %>('<%- operation.path %>', checkPermission('<%- operation.permission %>'), <% if (['create', 'update'].includes(operation.type)) { %>validate(<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Schema), <% } %>async ctx =>
  {
<% switch (operation.type) { case 'all': -%>
    //Get all <%- h.changeCase.no(h.inflection.pluralize(name)) %>
    const <%- h.changeCase.camel(h.inflection.pluralize(name)) %> = await <%- operation.name %>();

    //Return the <%- h.changeCase.no(h.inflection.pluralize(name)) %>
    ctx.response.body = <%- h.changeCase.camel(h.inflection.pluralize(name)) %>;
<% break; case 'create': -%>
    //Create the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- operation.name %>(ctx.request.body);

    //Return the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    ctx.response.body = <%- h.changeCase.camel(h.inflection.singularize(name)) %>;
<% break; case 'get': -%>
    //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- operation.name %>(<% for (const [parameter, parameterSeparator] of h.list(operation.parameters, ',')) { %>ctx.params.<%- parameter.name %>!<%- parameterSeparator %><% } %>);

    //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> is valid
    if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
    {
      //Log
      ctx.log.error(ctx, 'Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> <% for (const [parameter, parameterSeparator] of h.list(operation.parameters, '/')) { %><%- parameter.name %><%- parameterSeparator %><% } %>!');

      //Reject
      ctx.throw({
        error: {
          name: 'Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %>!',
          description: 'The supplied <%- h.changeCase.no(h.inflection.singularize(name)) %> <% for (const [parameter, parameterSeparator] of h.list(operation.parameters, '/')) { %><%- parameter.name %><%- parameterSeparator %><% } %> is invalid.'
        }
      }, 400);
    }

    //Return the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    ctx.response.body = <%- h.changeCase.camel(h.inflection.singularize(name)) %>;
<% break; case 'update': -%>
    //Update the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- operation.name %>(<% for (const [parameter, parameterSeparator] of h.list(operation.parameters, ',')) { %>ctx.params.<%- parameter.name %>!<%- parameterSeparator %><% } %>, ctx.request.body);

    //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> is valid
    if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
    {
      //Log
      ctx.log.error(ctx, 'Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> <% for (const [parameter, parameterSeparator] of h.list(operation.parameters, '/')) { %><%- parameter.name %><%- parameterSeparator %><% } %>!');

      //Reject
      ctx.throw({
        error: {
          name: 'Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %>!',
          description: 'The supplied <%- h.changeCase.no(h.inflection.singularize(name)) %> <% for (const [parameter, parameterSeparator] of h.list(operation.parameters, '/')) { %><%- parameter.name %><%- parameterSeparator %><% } %> is invalid.'
        }
      }, 400);
    }

    //Return the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    ctx.response.body = <%- h.changeCase.camel(h.inflection.singularize(name)) %>;
<% break; case 'delete': -%>
    //Delete the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- operation.name %>(<% for (const [parameter, parameterSeparator] of h.list(operation.parameters, ',')) { %>ctx.params.<%- parameter.name %>!<%- parameterSeparator %><% } %>);

    //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> is valid
    if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
    {
      //Log
      ctx.log.error(ctx, 'Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> <% for (const [parameter, parameterSeparator] of h.list(operation.parameters, '/')) { %><%- parameter.name %><%- parameterSeparator %><% } %>!');

      //Reject
      ctx.throw({
        error: {
          name: 'Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %>!',
          description: 'The supplied <%- h.changeCase.no(h.inflection.singularize(name)) %> <% for (const [parameter, parameterSeparator] of h.list(operation.parameters, '/')) { %><%- parameter.name %><%- parameterSeparator %><% } %> is invalid.'
        }
      }, 400);
    }

    //Return the <%- h.changeCase.no(h.inflection.singularize(name)) %>
    ctx.response.body = <%- h.changeCase.camel(h.inflection.singularize(name)) %>;
<% break; default: -%>
    //TODO: fully invoke controller
    await <%- operation.name %>();
<% break; } -%>
  })<%- operationSeparator %>

<% } -%>
//Export
export default router;