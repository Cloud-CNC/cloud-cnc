---
to: src/controllers/<%- h.changeCase.param(h.inflection.singularize(name)) %>.ts
---
/**
 * @fileoverview <%- h.changeCase.sentence(h.inflection.singularize(name)) %> controller
 */

//Imports
import generateQuery from '@/server/lib/search';
import log from '@/server/lib/log';
import {<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>} from '@/server/models/<%- h.changeCase.param(h.inflection.singularize(name)) %>';
import {Filter, WithID, WithPagination} from '@/server/lib/types';
import {hooks} from '@/server/lib/hooks';

<% for (const [operation, operationSeparator] of h.list(entity.operations, '\r\n')) { -%>
<% const requestSchema = (operation.requestSchema != null && operation.requestSchema.type == 'object' && operation.requestSchema.subSchemas.length > 0) ? operation.requestSchema : null; -%>
<% let responseSchema = (operation.responseSchema != null && operation.responseSchema.type == 'object' && operation.responseSchema.subSchemas.length > 0) ? operation.responseSchema : null; -%>
/**
<%- h.multiline(operation.description, 1) %>
 */
<% switch (operation.type) { case 'all': -%>
<% responseSchema = (operation.responseSchema != null && operation.responseSchema.type == 'object' && operation.responseSchema.subSchemas.length > 0) ? operation.responseSchema.subSchemas.find(subSchema => subSchema.key == h.changeCase.lower(h.inflection.pluralize(name))) : null; -%>
export const <%- operation.name %> = async (filter: Filter)<% if (responseSchema != null) { %>: Promise<WithPagination<'<%- h.changeCase.camel(h.inflection.pluralize(name)) %>', WithID<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(responseSchema.subSchema.subSchemas.filter(subSchema => subSchema.key != 'id'), ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>>[]>><% } %> =>
{
  //Invoke hook
  await hooks.callHook('<%- operation.name %>:pre', filter);

  //Generate the query
  const query = filter.query != null ? generateQuery<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>>(filter.query, [
<% for (const [schema, separator] of h.list(schemas.filter(schema => schema.searchable), ',')) { -%>
    '<%- schema.key %>'<%- separator %>
<% } -%>
  ]) : {};

  //Get all <%- h.changeCase.no(h.inflection.pluralize(name)) %>
  const result = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.paginate(query, {
    page: filter.page ?? 1,<% if (responseSchema != null) { %>
    projection: {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchema.subSchemas, ',')) { -%>
      <%- subSchema.key %>: 1<%- separator %>
<% } -%>
    },<% } %>
    limit: filter.limit ?? 25
  });

  //Invoke hook
  await hooks.callHook('<%- operation.name %>:post', result);

  //Log
  log.debug('Got all <%- h.changeCase.no(h.inflection.pluralize(name)) %>.');
<% if (responseSchema != null) { %>
  return {
    <%- h.changeCase.camel(h.inflection.pluralize(name)) %>: result.docs.map(<%- h.changeCase.camel(h.inflection.singularize(name)) %> => <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject()),
    page: result.page!,
    pages: result.totalPages
  };
<% } -%>
};
<% break; case 'create': -%>
export const <%- operation.name %> = async (create: Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% if (requestSchema != null) { for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% }} %>>)<% if (responseSchema != null) { %>: Promise<WithID<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(responseSchema.subSchemas.filter(subSchema => subSchema.key != 'id'), ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>>><% } %> =>
{
  //Invoke hook
  await hooks.callHook('<%- operation.name %>:pre', create);

  //Create the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.create(create);

  //Save the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>.save();

  //Invoke hook
  await hooks.callHook('<%- operation.name %>:post', <%- h.changeCase.camel(h.inflection.singularize(name)) %>);

  //Log
  log.debug(`Created <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<% if (responseSchema != null) { %>
  return {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ',')) { -%>
    <%- subSchema.key %>: <% if (subSchema.key == 'id') { %><%- h.changeCase.camel(h.inflection.singularize(name)) %>.<%- subSchema.key %><% } else { %>null //TODO: add data<% } %><%- separator %>
<% } -%>
  };
<% } -%>
};
<% break; case 'get': -%>
export const <%- operation.name %> = async (id: string)<% if (responseSchema != null) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>><% } %> =>
{
  //Invoke hook
  await hooks.callHook('<%- operation.name %>:pre', id);

  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.findById(id<% if (responseSchema != null) { %>, {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ',')) { -%>
    <%- subSchema.key %>: 1<%- separator %>
<% } -%>
  }<% } %>);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> exists
  if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
  {
    throw new Error(`Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> with ID ${id}!`);
  }

  //Invoke hook
  await hooks.callHook('<%- operation.name %>:post', <%- h.changeCase.camel(h.inflection.singularize(name)) %>);

  //Log
  log.debug(`Got <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<% if (responseSchema != null) { %>
  return <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject();
<% } -%>
};
<% break; case 'update': -%>
export const <%- operation.name %> = async (id: string, update: Partial<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>>)<% if (responseSchema != null) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>><% } %> =>
{
  //Invoke hook
  await hooks.callHook('<%- operation.name %>:pre', id, update);

  //Update the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.findByIdAndUpdate(id, update<% if (responseSchema != null) { %>, {
    new: true,
    overwrite: true,
    projection: {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ',')) { -%>
      <%- subSchema.key %>: 1<%- separator %>
<% } -%>
    }
  }<% } %>);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> exists
  if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
  {
    throw new Error(`Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> with ID ${id}!`);
  }

  //Invoke hook
  await hooks.callHook('<%- operation.name %>:post', <%- h.changeCase.camel(h.inflection.singularize(name)) %>);

  //Log
  log.debug(`Updated <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<% if (responseSchema != null) { %>
  return <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject();
<% } -%>
};
<% break; case 'delete': -%>
export const <%- operation.name %> = async (id: string)<% if (responseSchema != null) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>><% } %> =>
{
  //Invoke hook
  await hooks.callHook('<%- operation.name %>:pre', id);

  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.findByIdAndDelete(id<% if (responseSchema != null) { %>, {
    projection: {
<% for (const [subSchema, separator] of h.list(responseSchema.subSchemas, ',')) { -%>
      <%- subSchema.key %>: 1<%- separator %>
<% } -%>
    }
  }<% } %>);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> exists
  if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
  {
    throw new Error(`Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> with ID ${id}!`);
  }

  //Invoke hook
  await hooks.callHook('<%- operation.name %>:post', <%- h.changeCase.camel(h.inflection.singularize(name)) %>);

  //Log
  log.debug(`Deleted <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<% if (responseSchema != null) { %>
  return <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject();
<% } -%>
};
<% break; default: -%>
export const <%- operation.name %> = async () =>
{
  //Invoke hook
  //TODO: add hook arguments
  await hooks.callHook('<%- operation.name %>:pre');

  //TODO: implement business logic

  //Invoke hook
  //TODO: add hook arguments
  await hooks.callHook('<%- operation.name %>:post');

  //TODO: log
};
<% break; } -%>
<%- operationSeparator -%>
<% } -%>