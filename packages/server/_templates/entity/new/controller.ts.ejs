---
to: src/controllers/<%- h.changeCase.param(h.inflection.singularize(name)) %>.ts
---
/**
 * @fileoverview <%- h.changeCase.sentence(h.inflection.singularize(name)) %> model
 */

//Imports
import log from '@/lib/log';
import {<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>} from '@/models/<%- h.changeCase.param(h.inflection.singularize(name)) %>';

<% for (const operation of entity.operations) { -%>
/**
<%- h.multiline(operation.description, 1) %>
 */
<% switch (operation.type) { case 'all': -%>
const <%- operation.name %> = async (<% if (operation.ownable) { %>owner: string<% } %>)<% if (operation.responseFields.length > 0) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.responseFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>[]><% } %> =>
{
  //Get all <%- h.changeCase.no(h.inflection.pluralize(name)) %>
  const <%- h.changeCase.camel(h.inflection.pluralize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.find({<% if (operation.ownable) { %>owner<% } %>}<% if (operation.responseFields.length > 0) { %>, {
<% for (const [field, separator] of h.list(operation.responseFields, ',')) { -%>
    <%- field.name %>: 1<%- separator %>
<% } -%>
  }<% } %>);

  //Log
  log.info('Got all <%- h.changeCase.no(h.inflection.pluralize(name)) %>.');
<%_ if (operation.responseFields.length > 0) { %>
  return <%- h.changeCase.camel(h.inflection.pluralize(name)) %>.map(<%- h.changeCase.camel(h.inflection.singularize(name)) %> => <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject());
<% } -%>
};
<% break; case 'create': -%>
const <%- operation.name %> = async (create: Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.requestFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>)<% if (operation.responseFields.length > 0) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.responseFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>><% } %> =>
{
  //Create the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.create(create);

  //Save the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>.save();

  //Log
  log.info(`Created <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<%_ if (operation.responseFields.length > 0) { %>
  return {
<% for (const [field, separator] of h.list(operation.responseFields, ',')) { -%>
    <%- field.name %>: <% if (field.name == 'id') { %><%- h.changeCase.camel(h.inflection.singularize(name)) %>.<%- field.name %><% } else { %>null //TODO: add data<% } %><%- separator %>
<% } -%>
  };
<% } -%>
};
<% break; case 'get': -%>
const <%- operation.name %> = async (id: string)<% if (operation.responseFields.length > 0) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.responseFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>><% } %> =>
{
  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.findById(id<% if (operation.responseFields.length > 0) { %>, {
<% for (const [field, separator] of h.list(operation.responseFields, ',')) { -%>
    <%- field.name %>: 1<%- separator %>
<% } -%>
  }<% } %>);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> exists
  if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
  {
    throw new Error(`Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> with ID ${id}!`);
  }

  //Log
  log.info(`Got <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<%_ if (operation.responseFields.length > 0) { %>
  return <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject();
<% } -%>
};
<% break; case 'update': -%>
const <%- operation.name %> = async (id: string, update: Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.requestFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>)<% if (operation.responseFields.length > 0) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.responseFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>><% } %> =>
{
  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.findById(id<% if (operation.responseFields.length > 0) { %>, {
<% for (const [field, separator] of h.list(operation.responseFields, ',')) { -%>
    <%- field.name %>: 1<%- separator %>
<% } -%>
  }<% } %>);

  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> exists
  if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
  {
    throw new Error(`Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> with ID ${id}!`);
  }

  //Update the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>.update(update);

  //Log
  log.info(`Updated <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<%_ if (operation.responseFields.length > 0) { %>
  return <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject();
<% } -%>
};
<% break; case 'delete': -%>
const <%- operation.name %> = async (id: string)<% if (operation.responseFields.length > 0) { %>: Promise<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [field, separator] of h.list(operation.responseFields, ' | ')) { -%>'<%- field.name %>'<%- separator %><% } %>>><% } %> =>
{
  //Get the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  const <%- h.changeCase.camel(h.inflection.singularize(name)) %> = await <%- h.changeCase.pascal(h.inflection.singularize(name), false) %>.findById(id<% if (operation.responseFields.length > 0) { %>, {
<% for (const [field, separator] of h.list(operation.responseFields, ',')) { -%>
    <%- field.name %>: 1<%- separator %>
<% } -%>
  }<% } %>);
  
  //Ensure the <%- h.changeCase.no(h.inflection.singularize(name)) %> exists
  if (<%- h.changeCase.camel(h.inflection.singularize(name)) %> == null)
  {
    throw new Error(`Invalid <%- h.changeCase.no(h.inflection.singularize(name)) %> with ID ${id}!`);
  }

  //Delete the <%- h.changeCase.no(h.inflection.singularize(name)) %>
  await <%- h.changeCase.camel(h.inflection.singularize(name)) %>.delete();

  //Log
  log.info(`Deleted <%- h.changeCase.no(h.inflection.singularize(name)) %> ${<%- h.changeCase.camel(h.inflection.singularize(name)) %>.id}.`);
<%_ if (operation.responseFields.length > 0) { %>
  return <%- h.changeCase.camel(h.inflection.singularize(name)) %>.toObject();
<% } -%>
};
<% break; default: -%>
const <%- operation.name %> = () =>
{
  //TODO: implement business logic

  //TODO: log
};
<% break; } -%>

<% } -%>
//Export
export {
<% for (const [operation, separator] of h.list(entity.operations, ',')) { -%>
  <%- operation.name %><%- separator %>
<% } -%>
};