---
to: src/lib/hooks.ts
inject: true
after: interface Hooks\s+\{
prepend: true
---
  //<%- h.changeCase.sentence(h.inflection.singularize(name)) %> entity
<% for (const operation of entity.operations) { -%>
<% const requestSchema = (operation.requestSchema != null && operation.requestSchema.type == 'object' && operation.requestSchema.subSchemas.length > 0) ? operation.requestSchema : null; -%>
  /**
   * Ran before `<%- operation.name %>`
   */
<% switch (operation.type) { case 'all': -%>
  '<%- operation.name %>:pre': (filter: Filter, ctx: OperationContext) => void | Promise<void>;
<% break; case 'create': -%>
  '<%- operation.name %>:pre': (<% if (requestSchema != null) { %>data: Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>><% } %>, ctx: OperationContext) => void | Promise<void>;
<% break; case 'get': -%>
  '<%- operation.name %>:pre': (id: string<% if (requestSchema != null) { %>, data: Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>><% } %>, ctx: OperationContext) => void | Promise<void>;
<% break; case 'update': -%>
  '<%- operation.name %>:pre': (id: string<% if (requestSchema != null) { %>, data: Partial<Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>>><% } %>, ctx: OperationContext) => void | Promise<void>;
<% break; case 'delete': -%>
  '<%- operation.name %>:pre': (id: string<% if (requestSchema != null) { %>, data: Pick<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>, <% for (const [subSchema, separator] of h.list(requestSchema.subSchemas, ' | ')) { -%>'<%- subSchema.key %>'<%- separator %><% } %>><% } %>, ctx: OperationContext) => void | Promise<void>;
<% break; default: -%>
  '<%- operation.name %>:pre': (ctx: OperationContext) => void | Promise<void>;
<% break; } -%>

  /**
   * Ran after `<%- operation.name %>`
   */
<% switch (operation.type) { case 'all': -%>
  '<%- operation.name %>:post': (<%- h.changeCase.camel(h.inflection.pluralize(name)) %>: PaginateResult<I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document>, ctx: OperationContext) => void | Promise<void>;
<% break; case 'create': -%>
  '<%- operation.name %>:post': (<%- h.changeCase.camel(h.inflection.singularize(name)) %>: I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document, ctx: OperationContext) => void | Promise<void>;
<% break; case 'get': -%>
  '<%- operation.name %>:post': (<%- h.changeCase.camel(h.inflection.singularize(name)) %>: I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document, ctx: OperationContext) => void | Promise<void>;
<% break; case 'update': -%>
  '<%- operation.name %>:post': (<%- h.changeCase.camel(h.inflection.singularize(name)) %>: I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document, ctx: OperationContext) => void | Promise<void>;
<% break; case 'delete': -%>
  '<%- operation.name %>:post': (<%- h.changeCase.camel(h.inflection.singularize(name)) %>: I<%- h.changeCase.pascal(h.inflection.singularize(name), false) %>Document, ctx: OperationContext) => void | Promise<void>;
<% break; default: -%>
  '<%- operation.name %>:post': (ctx: OperationContext) => void | Promise<void>;
<% break; } -%>

<% } -%>