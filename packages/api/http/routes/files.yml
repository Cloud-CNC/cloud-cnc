# File routes

# Types
_id:
  description: File ID
  type: string
  format: object-id

name:
  description: File name
  type: string
  pattern: ^[ -~]+$
  minLength: 3
  maxLength: 256

description:
  description: File description
  type: string
  pattern: ^[ -~]+$
  maxLength: 1024

state:
  description: |
    File lifecycle state
    * `present`: the file is present; both the metadata and data are accessible
    * `deleted`: the file is in the trash; only the metadata is accessible
  type: string
  enum:
    - present
    - deleted

permission:
  description: |
    File subject permission
    * `admin`: the subject can read and write the file's name, description, state, content,
      estimate, and plugin data as well as delete the file and update the file's ACL
    * `write`: the subject can only read and write the file's name, description, state, content,
      estimate, and plugin data
    * `read`: the subject can only read the file's name, description, state, content, estimate,
      and plugin data
  type: string
  enum:
    - admin
    - write
    - read

acl:
  description: |
    File access control list
    * Keys: ACL permission keys
    * Values: ACL permission values

    *Note: if sending over `multipart/form-data`, this field MUST be a JSON-encoded string.*
  type: object
  additionalProperties:
    $ref: '#/permission'

binary:
  description: File binary data
  type: string
  format: binary

estimate:
  description: Job processing time estimate (In seconds)
  type: integer
  minimum: 0

# Routes
all:
  get:
    operationId: getAllFiles
    x-operation-type: all
    tags:
      - files
    summary: Get all files
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - id
                  - name
                  - lifecycle
                  - acl
                  - estimate
                properties:
                  id:
                    $ref: '#/_id'
                  name:
                    $ref: '#/name'
                  description:
                    $ref: '#/description'
                  state:
                    $ref: '#/state'
                  acl:
                    $ref: '#/acl'
                  estimate:
                    $ref: '#/estimate'
                  pluginData:
                    $ref: '../schemas.yml#/pluginData'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

create:
  post:
    operationId: createFile
    x-operation-type: create
    tags:
      - files
    summary: Create a file
    description: '*Note: route accepts `multipart/form-data`, not `application/json`.*'
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - name
              - acl
              - binary
              - estimate
            properties:
              name:
                $ref: '#/name'
              description:
                $ref: '#/description'
              acl:
                $ref: '#/acl'
              binary:
                $ref: '#/binary'
              estimate:
                $ref: '#/estimate'
              pluginData:
                $ref: '../schemas.yml#/pluginData'
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: '#/_id'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

raw:
  parameters:
    - name: id
      description: File ID
      in: path
      required: true
      schema:
        $ref: '#/_id'
  get:
    operationId: getRawFile
    x-operation-type: get
    tags:
      - files
    summary: Get a raw file
    responses:
      '200':
        description: OK
        content:
          application/octet-stream:
            schema:
              $ref: '#/binary'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

id:
  parameters:
    - name: id
      description: File ID
      in: path
      required: true
      schema:
        $ref: '#/_id'
  get:
    operationId: getFile
    x-operation-type: get
    tags:
      - files
    summary: Get a file
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - state
                - acl
                - estimate
              properties:
                name:
                  $ref: '#/name'
                description:
                  $ref: '#/description'
                state:
                  $ref: '#/state'
                acl:
                  $ref: '#/acl'
                estimate:
                  $ref: '#/estimate'
                pluginData:
                  $ref: '../schemas.yml#/pluginData'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

  patch:
    operationId: updateFile
    x-operation-type: update
    tags:
      - files
    summary: Update a file
    description: |
      *Note: route accepts `multipart/form-data`, not `application/json`.*

      If the client is implementing a "trash" system, the client SHOULD use this route and update
      the file state to `deleted` to signify that the file is pending permanent deletion instead of
      invoking the `DELETE /files/{id}` route.
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                $ref: '#/name'
              description:
                $ref: '#/description'
              state:
                $ref: '#/state'
              acl:
                $ref: '#/acl'
              binary:
                $ref: '#/binary'
              estimate:
                $ref: '#/estimate'
              pluginData:
                $ref: '../schemas.yml#/pluginData'
    responses:
      '204':
        $ref: '../responses.yml#/empty-success'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

  delete:
    operationId: deleteFile
    x-operation-type: delete
    tags:
      - files
    summary: Delete a file
    description: |
      *Note: this route permanently and irreversibly deletes the file.*

      If the client is implementing a "trash" system, the client SHOULD use the `PATCH /files/{id}`
      route and update the file state to `deleted` to signify that the file is pending permanent
      deletion instead of invoking this route.
    responses:
      '204':
        $ref: '../responses.yml#/empty-success'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'
