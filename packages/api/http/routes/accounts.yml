# Account routes

# Types
_id:
  description: Account ID
  type: string

username:
  description: Account username
  type: string

password:
  type: string
  description: Account password

totpEnabled:
  type: boolean
  description: Whether or not TOTP is enabled

totpSecret:
  type: string
  description: TOTP secret (Only present if TOTP is enabled)

roles:
  description: Account roles
  type: array
  items:
    type: string

# Routes
all:
  get:
    operationId: getAllAccounts
    x-operation-type: all
    tags:
      - accounts
    summary: Get all accounts
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - id
                  - username
                  - totpEnabled
                  - roles
                properties:
                  id:
                    $ref: '#/_id'
                  username:
                    $ref: '#/username'
                  totpEnabled:
                    $ref: '#/totpEnabled'
                  roles:
                    $ref: '#/roles'
                  pluginData:
                    $ref: '../schemas.yml#/pluginData'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

create:
  post:
    operationId: createAccount
    x-operation-type: create
    tags:
      - accounts
    summary: Create an account
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - roles
            properties:
              username:
                $ref: '#/username'
              password:
                $ref: '#/password'
              roles:
                $ref: '#/roles'
              pluginData:
                $ref: '../schemas.yml#/pluginData'
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  $ref: '#/_id'
                totpSecret:
                  $ref: '#/totpSecret'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

impersonate:
  parameters:
    - name: id
      description: Account ID
      in: path
      required: true
      schema:
        type: string
  post:
    operationId: impersonateAccount
    tags:
      - accounts
    summary: Start/stop impersonating an account
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - enabled
            properties:
              enabled:
                type: boolean
                description: Whether to start impersonating or stop impersonating
    responses:
      '204':
        $ref: '../responses.yml#/empty-success'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

id:
  parameters:
    - name: id
      description: |
        Account ID
        You can use the `me` alias to use the session's effective user account ID
      in: path
      required: true
      schema:
        type: string
  get:
    operationId: getAccount
    x-operation-type: get
    tags:
      - accounts
    summary: Get an account
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - totpEnabled
                - roles
              properties:
                username:
                  $ref: '#/username'
                totpEnabled:
                  $ref: '#/totpEnabled'
                roles:
                  $ref: '#/roles'
                pluginData:
                  $ref: '../schemas.yml#/pluginData'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

  patch:
    operationId: updateAccount
    x-operation-type: update
    tags:
      - accounts
    summary: Update an account
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                $ref: '#/username'
              password:
                $ref: '#/password'
              roles:
                $ref: '#/roles'
              pluginData:
                $ref: '../schemas.yml#/pluginData'

    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                totpSecret:
                  $ref: '#/totpSecret'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'

  delete:
    operationId: deleteAccount
    x-operation-type: delete
    tags:
      - accounts
    summary: Delete an account
    responses:
      '204':
        $ref: '../responses.yml#/empty-success'
      '400':
        $ref: '../responses.yml#/bad-request'
      '401':
        $ref: '../responses.yml#/unauthorized'
      '500':
        $ref: '../responses.yml#/internal-error'
