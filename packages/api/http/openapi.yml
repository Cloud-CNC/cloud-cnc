openapi: 3.0.3

info:
  title: Cloud CNC HTTP API
  description: |
    ## Preface
    This specification is the canonical source for the Cloud CNC HTTP API. The
    HTTP API is used between the client and API server(s) for administrative
    tasks (eg: creating a file, deleting a machine). Some of the concepts in
    Cloud CNC are based on [Kubernetes](https://kubernetes.io) (Specifically
    affinities, labels, taints, and tolerations). The key words "MUST",
    "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
    "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted
    as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt).

    ## Glossary
    * ACL: Access Control List
    * RBAC: Role-Based Access Control
    * TOTP: Time-based One Time Password ([RFC 6238](https://tools.ietf.org/html/rfc6238))
    * Labels: properties about a machine/relay that the job-scheduling algorithm uses to schedule
    compatible jobs on (eg: working-area dimensions)
    * Affinities: labels from a machine/relay that a given job would prefer to be scheduled on (eg:
    GCODE support)
    * Taints: similar to labels; unfavorable properties about a machine/relay that the job-
    scheduling
    algorithm uses to avoid scheduling incompatible jobs (eg: low filament)
    * Tolerations: similar to affinities; taints from a machine/relay that a given job can tolerate
    (eg: unheated bed)

    ## Access control
    
    ### API routes
    Access to API routes are controlled by RBAC. Each route has a permission name; permission names
    can be added to a role to grant that role access to that route; any user whose a member of that
    role inherits all of that role's permissions.

    The format of RBAC permissions is `[operation ID]` (eg: `getAllMachines`) for variant-less
    operations and `[operation ID]:[operation variant]` (eg: `getAccount:own`) for variant-full
    operations.

    ### Ownable entities
    Access to individual ownable entities (eg: files) are controlled by ACLs. Each ownable entity
    has a hash map, where the keys are identify the accessor and the values represent the accessor's
    permissions.

    The format of ACL accessors is `[entity name]:[entity ID]` (eg:
    `account:6109ba1dc24de13eb8fa0c94` or `role:6109ba287a72978d7d621f97`). Refer to entity-specific
    documentation for which accessor entities are supported and the accessor permissions themselves.

    ## Custom route attributes

    * `x-operation-type` (enum): common operation types. Valid values are:
      * `all`: get all entity instances
      * `create`: create an entity instance
      * `get`: get an entity instance by ID
      * `update`: update an entity instance by ID
      * `delete`: delete an entity instance by ID
  version: 2.0.0
  license:
    name: MIT
    url: https://github.com/cloud-cnc/cloud-cnc/blob/main/LICENSE

tags:
  - name: sessions
    description: User sessions

  - name: accounts
    description: User accounts

  - name: roles
    description: RBAC roles

  - name: files
    description: CAD, 2D/3D model, and/or machine-code files

  - name: jobs
    description: Machine jobs

  - name: relays
    description: Command relays

  - name: machines
    description: CNC machines

paths:
  /sessions/login/userpass:
    $ref: './routes/sessions.yml#/userpass'
  /sessions/login/totp:
    $ref: './routes/sessions.yml#/totp'
  /sessions/revoke:
    $ref: './routes/sessions.yml#/revoke'
  /sessions/logout:
    $ref: './routes/sessions.yml#/logout'

  /accounts/all:
    $ref: './routes/accounts.yml#/all'
  /accounts/create:
    $ref: './routes/accounts.yml#/create'
  /accounts/{id}/impersonate:
    $ref: './routes/accounts.yml#/impersonate'
  /accounts/{id}:
    $ref: './routes/accounts.yml#/id'

  /roles/all:
    $ref: './routes/roles.yml#/all'
  /roles/create:
    $ref: './routes/roles.yml#/create'
  /roles/{id}:
    $ref: './routes/roles.yml#/id'

  /files/all:
    $ref: './routes/files.yml#/all'
  /files/create:
    $ref: './routes/files.yml#/create'
  /files/{id}/raw:
    $ref: './routes/files.yml#/raw'
  /files/{id}:
    $ref: './routes/files.yml#/id'

  /jobs/all:
    $ref: './routes/jobs.yml#/all'
  /jobs/create:
    $ref: './routes/jobs.yml#/create'
  /jobs/{id}:
    $ref: './routes/jobs.yml#/id'

  /relays/all:
    $ref: './routes/relays.yml#/all'
  /relays/create:
    $ref: './routes/relays.yml#/create'
  /relays/{id}:
    $ref: './routes/relays.yml#/id'

  /machines/all:
    $ref: './routes/machines.yml#/all'
  /machines/create:
    $ref: './routes/machines.yml#/create'
  /machines/{id}:
    $ref: './routes/machines.yml#/id'

components:
  securitySchemes:
    cookie:
      type: apiKey
      in: cookie
      name: session

security:
  - cookie: []
